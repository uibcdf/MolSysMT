{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0a64f9c5-c973-4b05-b412-baa15298f60e",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "# This cell is removed with the tag: \"remove-input\"\n",
    "# As such, it will not be shown in documentation\n",
    "\n",
    "# import warnings\n",
    "# warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38b196fd-7966-4ee9-95ed-907e20a6f1af",
   "metadata": {},
   "source": [
    "# Barnase-Barstar\n",
    "\n",
    "The structure with PDB id [1BRS](https://www.rcsb.org/structure/1BRS) has three barnase-barstar complexes in its unit cell, but none of them has their monomers sequences complete. However, we can find a barnase and a barstar monomer without missing residues coming from different dimers. If we want to prepare a good complex with them, we only need to follow these steps:\n",
    "\n",
    "    1- Download the molecular system from the protein data bank.\n",
    "    2- Inspect the molecular system to identify the monomers we want to extract.\n",
    "    3- Form a new complex with the chosen monomers.\n",
    "    4- Complete the complex with the missing atoms.\n",
    "    5- Write the new barnase-barstar complex as a pdb file."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ab514f8-dcfb-4ac5-80eb-5ecae3702cda",
   "metadata": {},
   "source": [
    "## Download the molecular system\n",
    "\n",
    "Let's download the 1BRS molecular system with MolSysMT:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "96a0a88e-777b-4134-bb1b-2c96ac62d61b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "37eeefb69cd24a92b7cb7ac39a16fd79",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import molsysmt as msm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0beea7d1-6e73-4b82-9e18-b5644df644fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "molecular_system = msm.convert('1BRS')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "414af641-d77d-46bb-aa71-beae327be4a4",
   "metadata": {},
   "source": [
    "## Inspect the molecular system"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ca7fa1c-c8b0-4521-b237-97c0ff4bf261",
   "metadata": {},
   "source": [
    "The basic method {func}`molsysmt.basic.info` it is a good tool to inspect the molecular system at different levels. Let's ask this method for a first overview of the molecular system:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "98166039-5610-4d90-b8cf-5105d9aaac52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "</style>\n",
       "<table id=\"T_ab51f\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th id=\"T_ab51f_level0_col0\" class=\"col_heading level0 col0\" >form</th>\n",
       "      <th id=\"T_ab51f_level0_col1\" class=\"col_heading level0 col1\" >n_atoms</th>\n",
       "      <th id=\"T_ab51f_level0_col2\" class=\"col_heading level0 col2\" >n_groups</th>\n",
       "      <th id=\"T_ab51f_level0_col3\" class=\"col_heading level0 col3\" >n_components</th>\n",
       "      <th id=\"T_ab51f_level0_col4\" class=\"col_heading level0 col4\" >n_chains</th>\n",
       "      <th id=\"T_ab51f_level0_col5\" class=\"col_heading level0 col5\" >n_molecules</th>\n",
       "      <th id=\"T_ab51f_level0_col6\" class=\"col_heading level0 col6\" >n_entities</th>\n",
       "      <th id=\"T_ab51f_level0_col7\" class=\"col_heading level0 col7\" >n_waters</th>\n",
       "      <th id=\"T_ab51f_level0_col8\" class=\"col_heading level0 col8\" >n_proteins</th>\n",
       "      <th id=\"T_ab51f_level0_col9\" class=\"col_heading level0 col9\" >n_structures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td id=\"T_ab51f_row0_col0\" class=\"data row0 col0\" >molsysmt.MolSys</td>\n",
       "      <td id=\"T_ab51f_row0_col1\" class=\"data row0 col1\" >5151</td>\n",
       "      <td id=\"T_ab51f_row0_col2\" class=\"data row0 col2\" >1101</td>\n",
       "      <td id=\"T_ab51f_row0_col3\" class=\"data row0 col3\" >521</td>\n",
       "      <td id=\"T_ab51f_row0_col4\" class=\"data row0 col4\" >12</td>\n",
       "      <td id=\"T_ab51f_row0_col5\" class=\"data row0 col5\" >519</td>\n",
       "      <td id=\"T_ab51f_row0_col6\" class=\"data row0 col6\" >3</td>\n",
       "      <td id=\"T_ab51f_row0_col7\" class=\"data row0 col7\" >513</td>\n",
       "      <td id=\"T_ab51f_row0_col8\" class=\"data row0 col8\" >6</td>\n",
       "      <td id=\"T_ab51f_row0_col9\" class=\"data row0 col9\" >1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7f6e27b3b490>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.info(molecular_system)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50283e10-846e-4445-8b45-180682b10a3e",
   "metadata": {},
   "source": [
    "```{admonition} Note\n",
    ":class: note\n",
    "All methods defined in the `molsysmt.basic` module can be invoked also from the main level of the library. As such, `molsysmt.info` is the same method as `molsysmt.basic.info`.\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "400f0566-6c92-4243-81ea-8b42854c0d34",
   "metadata": {},
   "source": [
    "The system has water molecules. Let's work only with the proteins."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "402451e7-cba7-4bea-b204-936c625d131f",
   "metadata": {},
   "outputs": [],
   "source": [
    "molecular_system = msm.extract(molecular_system, selection='molecule_type==\"protein\"')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f1cfcf09-bb0c-4b42-89ce-812ba4eb1136",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "</style>\n",
       "<table id=\"T_9761b\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th id=\"T_9761b_level0_col0\" class=\"col_heading level0 col0\" >form</th>\n",
       "      <th id=\"T_9761b_level0_col1\" class=\"col_heading level0 col1\" >n_atoms</th>\n",
       "      <th id=\"T_9761b_level0_col2\" class=\"col_heading level0 col2\" >n_groups</th>\n",
       "      <th id=\"T_9761b_level0_col3\" class=\"col_heading level0 col3\" >n_components</th>\n",
       "      <th id=\"T_9761b_level0_col4\" class=\"col_heading level0 col4\" >n_chains</th>\n",
       "      <th id=\"T_9761b_level0_col5\" class=\"col_heading level0 col5\" >n_molecules</th>\n",
       "      <th id=\"T_9761b_level0_col6\" class=\"col_heading level0 col6\" >n_entities</th>\n",
       "      <th id=\"T_9761b_level0_col7\" class=\"col_heading level0 col7\" >n_proteins</th>\n",
       "      <th id=\"T_9761b_level0_col8\" class=\"col_heading level0 col8\" >n_structures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td id=\"T_9761b_row0_col0\" class=\"data row0 col0\" >molsysmt.MolSys</td>\n",
       "      <td id=\"T_9761b_row0_col1\" class=\"data row0 col1\" >4638</td>\n",
       "      <td id=\"T_9761b_row0_col2\" class=\"data row0 col2\" >588</td>\n",
       "      <td id=\"T_9761b_row0_col3\" class=\"data row0 col3\" >8</td>\n",
       "      <td id=\"T_9761b_row0_col4\" class=\"data row0 col4\" >6</td>\n",
       "      <td id=\"T_9761b_row0_col5\" class=\"data row0 col5\" >6</td>\n",
       "      <td id=\"T_9761b_row0_col6\" class=\"data row0 col6\" >2</td>\n",
       "      <td id=\"T_9761b_row0_col7\" class=\"data row0 col7\" >6</td>\n",
       "      <td id=\"T_9761b_row0_col8\" class=\"data row0 col8\" >1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7f6e1f4b1840>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.info(molecular_system)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4b0a1a3-60dd-4b7e-b3bb-488e5b66d458",
   "metadata": {},
   "source": [
    "As we said above, {func}`molsysmt.basic.info` can be used to get descriptions of the molecular system at different levels of complexity  looking accordint to its composing elements: atoms, groups, components, chains, molecules or entities."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8adce55f-f5e2-41e2-b09b-717b50db7ad5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "</style>\n",
       "<table id=\"T_3e238\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th id=\"T_3e238_level0_col0\" class=\"col_heading level0 col0\" >index</th>\n",
       "      <th id=\"T_3e238_level0_col1\" class=\"col_heading level0 col1\" >name</th>\n",
       "      <th id=\"T_3e238_level0_col2\" class=\"col_heading level0 col2\" >type</th>\n",
       "      <th id=\"T_3e238_level0_col3\" class=\"col_heading level0 col3\" >n atoms</th>\n",
       "      <th id=\"T_3e238_level0_col4\" class=\"col_heading level0 col4\" >n groups</th>\n",
       "      <th id=\"T_3e238_level0_col5\" class=\"col_heading level0 col5\" >n components</th>\n",
       "      <th id=\"T_3e238_level0_col6\" class=\"col_heading level0 col6\" >chain index</th>\n",
       "      <th id=\"T_3e238_level0_col7\" class=\"col_heading level0 col7\" >entity index</th>\n",
       "      <th id=\"T_3e238_level0_col8\" class=\"col_heading level0 col8\" >entity name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td id=\"T_3e238_row0_col0\" class=\"data row0 col0\" >0</td>\n",
       "      <td id=\"T_3e238_row0_col1\" class=\"data row0 col1\" >BARNASE</td>\n",
       "      <td id=\"T_3e238_row0_col2\" class=\"data row0 col2\" >protein</td>\n",
       "      <td id=\"T_3e238_row0_col3\" class=\"data row0 col3\" >864</td>\n",
       "      <td id=\"T_3e238_row0_col4\" class=\"data row0 col4\" >108</td>\n",
       "      <td id=\"T_3e238_row0_col5\" class=\"data row0 col5\" >1</td>\n",
       "      <td id=\"T_3e238_row0_col6\" class=\"data row0 col6\" >0</td>\n",
       "      <td id=\"T_3e238_row0_col7\" class=\"data row0 col7\" >0</td>\n",
       "      <td id=\"T_3e238_row0_col8\" class=\"data row0 col8\" >BARNASE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td id=\"T_3e238_row1_col0\" class=\"data row1 col0\" >1</td>\n",
       "      <td id=\"T_3e238_row1_col1\" class=\"data row1 col1\" >BARNASE</td>\n",
       "      <td id=\"T_3e238_row1_col2\" class=\"data row1 col2\" >protein</td>\n",
       "      <td id=\"T_3e238_row1_col3\" class=\"data row1 col3\" >878</td>\n",
       "      <td id=\"T_3e238_row1_col4\" class=\"data row1 col4\" >110</td>\n",
       "      <td id=\"T_3e238_row1_col5\" class=\"data row1 col5\" >1</td>\n",
       "      <td id=\"T_3e238_row1_col6\" class=\"data row1 col6\" >1</td>\n",
       "      <td id=\"T_3e238_row1_col7\" class=\"data row1 col7\" >0</td>\n",
       "      <td id=\"T_3e238_row1_col8\" class=\"data row1 col8\" >BARNASE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td id=\"T_3e238_row2_col0\" class=\"data row2 col0\" >2</td>\n",
       "      <td id=\"T_3e238_row2_col1\" class=\"data row2 col1\" >BARNASE</td>\n",
       "      <td id=\"T_3e238_row2_col2\" class=\"data row2 col2\" >protein</td>\n",
       "      <td id=\"T_3e238_row2_col3\" class=\"data row2 col3\" >839</td>\n",
       "      <td id=\"T_3e238_row2_col4\" class=\"data row2 col4\" >108</td>\n",
       "      <td id=\"T_3e238_row2_col5\" class=\"data row2 col5\" >1</td>\n",
       "      <td id=\"T_3e238_row2_col6\" class=\"data row2 col6\" >2</td>\n",
       "      <td id=\"T_3e238_row2_col7\" class=\"data row2 col7\" >0</td>\n",
       "      <td id=\"T_3e238_row2_col8\" class=\"data row2 col8\" >BARNASE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td id=\"T_3e238_row3_col0\" class=\"data row3 col0\" >3</td>\n",
       "      <td id=\"T_3e238_row3_col1\" class=\"data row3 col1\" >BARSTAR</td>\n",
       "      <td id=\"T_3e238_row3_col2\" class=\"data row3 col2\" >protein</td>\n",
       "      <td id=\"T_3e238_row3_col3\" class=\"data row3 col3\" >693</td>\n",
       "      <td id=\"T_3e238_row3_col4\" class=\"data row3 col4\" >87</td>\n",
       "      <td id=\"T_3e238_row3_col5\" class=\"data row3 col5\" >2</td>\n",
       "      <td id=\"T_3e238_row3_col6\" class=\"data row3 col6\" >3</td>\n",
       "      <td id=\"T_3e238_row3_col7\" class=\"data row3 col7\" >1</td>\n",
       "      <td id=\"T_3e238_row3_col8\" class=\"data row3 col8\" >BARSTAR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td id=\"T_3e238_row4_col0\" class=\"data row4 col0\" >4</td>\n",
       "      <td id=\"T_3e238_row4_col1\" class=\"data row4 col1\" >BARSTAR</td>\n",
       "      <td id=\"T_3e238_row4_col2\" class=\"data row4 col2\" >protein</td>\n",
       "      <td id=\"T_3e238_row4_col3\" class=\"data row4 col3\" >665</td>\n",
       "      <td id=\"T_3e238_row4_col4\" class=\"data row4 col4\" >86</td>\n",
       "      <td id=\"T_3e238_row4_col5\" class=\"data row4 col5\" >2</td>\n",
       "      <td id=\"T_3e238_row4_col6\" class=\"data row4 col6\" >4</td>\n",
       "      <td id=\"T_3e238_row4_col7\" class=\"data row4 col7\" >1</td>\n",
       "      <td id=\"T_3e238_row4_col8\" class=\"data row4 col8\" >BARSTAR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td id=\"T_3e238_row5_col0\" class=\"data row5 col0\" >5</td>\n",
       "      <td id=\"T_3e238_row5_col1\" class=\"data row5 col1\" >BARSTAR</td>\n",
       "      <td id=\"T_3e238_row5_col2\" class=\"data row5 col2\" >protein</td>\n",
       "      <td id=\"T_3e238_row5_col3\" class=\"data row5 col3\" >699</td>\n",
       "      <td id=\"T_3e238_row5_col4\" class=\"data row5 col4\" >89</td>\n",
       "      <td id=\"T_3e238_row5_col5\" class=\"data row5 col5\" >1</td>\n",
       "      <td id=\"T_3e238_row5_col6\" class=\"data row5 col6\" >5</td>\n",
       "      <td id=\"T_3e238_row5_col7\" class=\"data row5 col7\" >1</td>\n",
       "      <td id=\"T_3e238_row5_col8\" class=\"data row5 col8\" >BARSTAR</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7f6eaa9c4bb0>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.info(molecular_system, element='molecule')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c6254a50-15c4-452d-9530-ad0afc819861",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "</style>\n",
       "<table id=\"T_a4344\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th id=\"T_a4344_level0_col0\" class=\"col_heading level0 col0\" >index</th>\n",
       "      <th id=\"T_a4344_level0_col1\" class=\"col_heading level0 col1\" >id</th>\n",
       "      <th id=\"T_a4344_level0_col2\" class=\"col_heading level0 col2\" >name</th>\n",
       "      <th id=\"T_a4344_level0_col3\" class=\"col_heading level0 col3\" >n atoms</th>\n",
       "      <th id=\"T_a4344_level0_col4\" class=\"col_heading level0 col4\" >n groups</th>\n",
       "      <th id=\"T_a4344_level0_col5\" class=\"col_heading level0 col5\" >n components</th>\n",
       "      <th id=\"T_a4344_level0_col6\" class=\"col_heading level0 col6\" >molecule index</th>\n",
       "      <th id=\"T_a4344_level0_col7\" class=\"col_heading level0 col7\" >molecule type</th>\n",
       "      <th id=\"T_a4344_level0_col8\" class=\"col_heading level0 col8\" >entity index</th>\n",
       "      <th id=\"T_a4344_level0_col9\" class=\"col_heading level0 col9\" >entity name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td id=\"T_a4344_row0_col0\" class=\"data row0 col0\" >0</td>\n",
       "      <td id=\"T_a4344_row0_col1\" class=\"data row0 col1\" >0</td>\n",
       "      <td id=\"T_a4344_row0_col2\" class=\"data row0 col2\" >A</td>\n",
       "      <td id=\"T_a4344_row0_col3\" class=\"data row0 col3\" >864</td>\n",
       "      <td id=\"T_a4344_row0_col4\" class=\"data row0 col4\" >108</td>\n",
       "      <td id=\"T_a4344_row0_col5\" class=\"data row0 col5\" >1</td>\n",
       "      <td id=\"T_a4344_row0_col6\" class=\"data row0 col6\" >0</td>\n",
       "      <td id=\"T_a4344_row0_col7\" class=\"data row0 col7\" >protein</td>\n",
       "      <td id=\"T_a4344_row0_col8\" class=\"data row0 col8\" >0</td>\n",
       "      <td id=\"T_a4344_row0_col9\" class=\"data row0 col9\" >BARNASE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td id=\"T_a4344_row1_col0\" class=\"data row1 col0\" >1</td>\n",
       "      <td id=\"T_a4344_row1_col1\" class=\"data row1 col1\" >1</td>\n",
       "      <td id=\"T_a4344_row1_col2\" class=\"data row1 col2\" >B</td>\n",
       "      <td id=\"T_a4344_row1_col3\" class=\"data row1 col3\" >878</td>\n",
       "      <td id=\"T_a4344_row1_col4\" class=\"data row1 col4\" >110</td>\n",
       "      <td id=\"T_a4344_row1_col5\" class=\"data row1 col5\" >1</td>\n",
       "      <td id=\"T_a4344_row1_col6\" class=\"data row1 col6\" >1</td>\n",
       "      <td id=\"T_a4344_row1_col7\" class=\"data row1 col7\" >protein</td>\n",
       "      <td id=\"T_a4344_row1_col8\" class=\"data row1 col8\" >0</td>\n",
       "      <td id=\"T_a4344_row1_col9\" class=\"data row1 col9\" >BARNASE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td id=\"T_a4344_row2_col0\" class=\"data row2 col0\" >2</td>\n",
       "      <td id=\"T_a4344_row2_col1\" class=\"data row2 col1\" >2</td>\n",
       "      <td id=\"T_a4344_row2_col2\" class=\"data row2 col2\" >C</td>\n",
       "      <td id=\"T_a4344_row2_col3\" class=\"data row2 col3\" >839</td>\n",
       "      <td id=\"T_a4344_row2_col4\" class=\"data row2 col4\" >108</td>\n",
       "      <td id=\"T_a4344_row2_col5\" class=\"data row2 col5\" >1</td>\n",
       "      <td id=\"T_a4344_row2_col6\" class=\"data row2 col6\" >2</td>\n",
       "      <td id=\"T_a4344_row2_col7\" class=\"data row2 col7\" >protein</td>\n",
       "      <td id=\"T_a4344_row2_col8\" class=\"data row2 col8\" >0</td>\n",
       "      <td id=\"T_a4344_row2_col9\" class=\"data row2 col9\" >BARNASE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td id=\"T_a4344_row3_col0\" class=\"data row3 col0\" >3</td>\n",
       "      <td id=\"T_a4344_row3_col1\" class=\"data row3 col1\" >3</td>\n",
       "      <td id=\"T_a4344_row3_col2\" class=\"data row3 col2\" >D</td>\n",
       "      <td id=\"T_a4344_row3_col3\" class=\"data row3 col3\" >693</td>\n",
       "      <td id=\"T_a4344_row3_col4\" class=\"data row3 col4\" >87</td>\n",
       "      <td id=\"T_a4344_row3_col5\" class=\"data row3 col5\" >2</td>\n",
       "      <td id=\"T_a4344_row3_col6\" class=\"data row3 col6\" >3</td>\n",
       "      <td id=\"T_a4344_row3_col7\" class=\"data row3 col7\" >protein</td>\n",
       "      <td id=\"T_a4344_row3_col8\" class=\"data row3 col8\" >1</td>\n",
       "      <td id=\"T_a4344_row3_col9\" class=\"data row3 col9\" >BARSTAR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td id=\"T_a4344_row4_col0\" class=\"data row4 col0\" >4</td>\n",
       "      <td id=\"T_a4344_row4_col1\" class=\"data row4 col1\" >4</td>\n",
       "      <td id=\"T_a4344_row4_col2\" class=\"data row4 col2\" >E</td>\n",
       "      <td id=\"T_a4344_row4_col3\" class=\"data row4 col3\" >665</td>\n",
       "      <td id=\"T_a4344_row4_col4\" class=\"data row4 col4\" >86</td>\n",
       "      <td id=\"T_a4344_row4_col5\" class=\"data row4 col5\" >2</td>\n",
       "      <td id=\"T_a4344_row4_col6\" class=\"data row4 col6\" >4</td>\n",
       "      <td id=\"T_a4344_row4_col7\" class=\"data row4 col7\" >protein</td>\n",
       "      <td id=\"T_a4344_row4_col8\" class=\"data row4 col8\" >1</td>\n",
       "      <td id=\"T_a4344_row4_col9\" class=\"data row4 col9\" >BARSTAR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td id=\"T_a4344_row5_col0\" class=\"data row5 col0\" >5</td>\n",
       "      <td id=\"T_a4344_row5_col1\" class=\"data row5 col1\" >5</td>\n",
       "      <td id=\"T_a4344_row5_col2\" class=\"data row5 col2\" >F</td>\n",
       "      <td id=\"T_a4344_row5_col3\" class=\"data row5 col3\" >699</td>\n",
       "      <td id=\"T_a4344_row5_col4\" class=\"data row5 col4\" >89</td>\n",
       "      <td id=\"T_a4344_row5_col5\" class=\"data row5 col5\" >1</td>\n",
       "      <td id=\"T_a4344_row5_col6\" class=\"data row5 col6\" >5</td>\n",
       "      <td id=\"T_a4344_row5_col7\" class=\"data row5 col7\" >protein</td>\n",
       "      <td id=\"T_a4344_row5_col8\" class=\"data row5 col8\" >1</td>\n",
       "      <td id=\"T_a4344_row5_col9\" class=\"data row5 col9\" >BARSTAR</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7f6eaab26920>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.info(molecular_system, element='chain')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12540869-4734-4d60-b176-3ac63988636a",
   "metadata": {},
   "source": [
    "This way we get to know that the system is composed by three barnase and three barstar monomers. Those with chain name $B$ and $F$ are longer and compact (they have all their atoms covalently bonded -no missing residues-). Unfortunately, these monomers belong to different dimers as we can see with {func}`molsysmt.basic.view`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d9680dd0-3ac7-4241-98fd-e7a5dcc05f37",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "# This cell is removed with the tag: \"remove-input\"\n",
    "# As such, it will not be shown in documentation\n",
    "\n",
    "nglview_htmlfile = '../../_static/nglview/barnase_barstar_1.html'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d9b5135e-3737-418f-b47c-e83b9d206e05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e953b155b47a4bb785364bc656c9e672",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "msm.view(molecular_system, viewer='NGLView')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1852dcfb-2793-4e27-99be-db88556e468b",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "# This cell is removed with the tag: \"remove-input\"\n",
    "# As such, it will not be shown in documentation\n",
    "\n",
    "if False:\n",
    "    # to write an html the view had to be displayed in a cell before\n",
    "    msm.thirds.nglview.write_html(view, nglview_htmlfile)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b64734f7-de86-4f30-b2f0-c7ca63226a79",
   "metadata": {},
   "source": [
    "## Form a new complex\n",
    "\n",
    "To form a new barnase-barstar complex, let's make a structural alignment of the barstar with chain name $F$ over the barstar with chain name $E$. This way, $F$ will be in its bounded position to barnase ($B$). But first let's extract these three monomers:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0fe6ad16-5306-4a00-b813-a93434a2ea45",
   "metadata": {},
   "outputs": [],
   "source": [
    "barnase = msm.extract(molecular_system, selection=\"chain_name=='B'\")\n",
    "barstar_E = msm.extract(molecular_system, selection=\"chain_name=='E'\")\n",
    "barstar_F = msm.extract(molecular_system, selection=\"chain_name=='F'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2b6268cd-caa6-41e7-927e-99210621abd3",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "# This cell is removed with the tag: \"remove-input\"\n",
    "# As such, it will not be shown in documentation\n",
    "\n",
    "nglview_htmlfile = '../../_static/nglview/barnase_barstar_2.html'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "22cbcbdb-44b6-4652-b8cf-69861f9a99f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ed060ebc2f8d4a7db0516b8fbe5d2023",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "msm.view([barnase, barstar_E, barstar_F], viewer='NGLView')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ea3b134f-8a35-4601-b17c-532e6504de1a",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "# This cell is removed with the tag: \"remove-input\"\n",
    "# As such, it will not be shown in documentation\n",
    "\n",
    "if False:\n",
    "    # to write an html the view had to be displayed in a cell before\n",
    "    msm.thirds.nglview.write_html(view, nglview_htmlfile)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4773c579-d3ad-48f0-aac7-175b25d05361",
   "metadata": {},
   "source": [
    "We can already work with {func}`molsysmt.structure.align` to overlap the structure of $E$ over $F$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3f6ff7b5-6743-405f-b38a-df2b26b37220",
   "metadata": {},
   "outputs": [],
   "source": [
    "barstar_F_over_E = msm.structure.least_rmsd_align(barstar_F, selection='atom_name==\"CA\"',\n",
    "                                       reference_molecular_system=barstar_E, reference_selection='atom_name==\"CA\"')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "51d5b2ef-f47a-45e3-865d-834922656194",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "# This cell is removed with the tag: \"remove-input\"\n",
    "# As such, it will not be shown in documentation\n",
    "\n",
    "nglview_htmlfile = '../../_static/nglview/barnase_barstar_3.html'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4ba2065c-7c69-4f7b-9eef-42c43186c091",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "394781e9b6db4dc1920ea27659ad8e7a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "msm.view([barnase, barstar_E, barstar_F_over_E], viewer='NGLView')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a926d555-db90-4f67-af7d-ef4897044c8b",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "# This cell is removed with the tag: \"remove-input\"\n",
    "# As such, it will not be shown in documentation\n",
    "\n",
    "if False:\n",
    "    # to write an html the view had to be displayed in a cell before\n",
    "    msm.thirds.nglview.write_html(view, nglview_htmlfile)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca3251cc-918f-4663-a60b-24cdec2f6ef7",
   "metadata": {},
   "source": [
    "We can finnally produce our new dimer with {func}`molsysmt.basic.merge`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5e215d45-fc61-4e47-964d-39b21725ace2",
   "metadata": {},
   "outputs": [],
   "source": [
    "barnase_barstar = msm.merge([barnase, barstar_F_over_E])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "efc8d3a0-62ae-4a72-b5f3-aab50b12f0de",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "# This cell is removed with the tag: \"remove-input\"\n",
    "# As such, it will not be shown in documentation\n",
    "\n",
    "nglview_htmlfile = '../../_static/nglview/barnase_barstar_4.html'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "fadc4580-9301-4861-b136-ca8eb3a2d13c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4c8efe010b0846199dbfe66a1b72bdbd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "msm.view(barnase_barstar, viewer='NGLView')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "32ee60bd-9516-4c5c-8e09-13613768e1cf",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "# This cell is removed with the tag: \"remove-input\"\n",
    "# As such, it will not be shown in documentation\n",
    "\n",
    "if False:\n",
    "    # to write an html the view had to be displayed in a cell before\n",
    "    msm.thirds.nglview.write_html(view, nglview_htmlfile)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8850210-cbac-415e-9d69-e33257d0f0b3",
   "metadata": {},
   "source": [
    "## Complete the molecular system\n",
    "\n",
    "Some structures deposited in the Protein Data Bank have atoms with alternate locations, and missing residues or atoms. Let's check if this is the case of our new dimer with the assitance of {func}`molsysmt.build.get_atoms_with_alternate_locations`, {func}`molsysmt.build.get_missing_heavy_atoms`, {func}`molsysmt.build.get_missing_residues`, and {func}`molsysmt.basic.contains`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "22f4f5b2-a7d0-4da5-9b83-4e6bcd4d33fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{}]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.get(barnase_barstar, alternate_locations=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "40e44298-1802-4ae8-8e2e-10ec7f5a749e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{131: ['CD', 'CE', 'NZ'],\n",
       " 137: ['CG', 'CD', 'OE1', 'OE2'],\n",
       " 155: ['CG', 'CD', 'OE1', 'OE2'],\n",
       " 173: ['CG', 'CD', 'OE1', 'OE2'],\n",
       " 174: ['CG', 'OD1', 'ND2'],\n",
       " 198: ['O']}"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.build.get_missing_heavy_atoms(barnase_barstar)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e1807d5a-2982-46af-ae5e-10ce1191770d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{}"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.build.get_missing_residues(barnase_barstar)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "69577990-8162-463e-a78e-8d250c3e6578",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.contains(barnase_barstar, selection='hydrogens')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "742a922b-184f-45de-8198-42456106072b",
   "metadata": {},
   "source": [
    "Our complex has no hydrogens -1BRS was solved indeed by x ray crystallography- and some heavy atoms are missing. Let's solve these defects with {func}`molsysmt.build.add_missing_heavy_atoms` and {func}`molsysmt.build.add_missing_hydrogens`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "8077b8ee-fb4f-4e21-b771-3e12b1350f30",
   "metadata": {},
   "outputs": [],
   "source": [
    "barnase_barstar = msm.build.add_missing_heavy_atoms(barnase_barstar)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "cf935ced-e7ef-4d84-b385-01d7f2954652",
   "metadata": {},
   "outputs": [],
   "source": [
    "barnase_barstar = msm.build.add_missing_hydrogens(barnase_barstar, pH=7.4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "9bb4f458-5437-4d43-8059-5160a6b1a4ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1563"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.get(barnase_barstar, element='atom', selection='atom_type==\"H\"', n_atoms=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d3e73a9-c7fc-4464-a0f4-ea609164bd91",
   "metadata": {},
   "source": [
    "## Write a pdb file with the new dimer\n",
    "\n",
    "To conclude this exercise, the new molecular system can be converted to a pdb file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "cff30765-8a8f-458a-96d3-68872cf27e73",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'barnase_barstar.pdb'"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.convert(barnase_barstar, to_form='barnase_barstar.pdb')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b07afd89-5935-4157-8537-e6a8d8b2cdaa",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "# This cell is removed with the tag: \"remove-input\"\n",
    "# As such, it will not be shown in documentation\n",
    "\n",
    "from os import remove\n",
    "remove('barnase_barstar.pdb')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
