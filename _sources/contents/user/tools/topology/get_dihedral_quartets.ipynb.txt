{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f3ae366714bb48b5855a2214e244b13f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import molsysmt as msm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Get dihedral quartets\n",
    "\n",
    "MolSysMT includes a method to obtain the sets of atoms quartets defining all dihedral angles present in the system given their names. There is no need then to remember the atom names defining the angle $\\phi$, $\\psi$, $\\omega$, or any of the $\\chi$ angles. Lets see how this method works over one of the demo molecular systems:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "molecular_system = msm.systems['TcTIM']['1tcd.mmtf']\n",
    "molecular_system = msm.convert(molecular_system)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The quartets defining the angles $\\phi$, $\\psi$ or $\\omega$ over the whole system can be obtained as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "phi_chains = msm.topology.get_dihedral_quartets(molecular_system, phi=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[   2,    9,   10,   11],\n",
       "       [  11,   16,   17,   18],\n",
       "       [  18,   25,   26,   27],\n",
       "       ...,\n",
       "       [3789, 3796, 3797, 3798],\n",
       "       [3798, 3801, 3802, 3803],\n",
       "       [3803, 3808, 3809, 3810]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phi_chains"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The search of these quartets can be limited to a specific selection. Lets see how to get the quartes of the $\\psi$ angles in residues 10 to 15:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "psi_chains = msm.topology.get_dihedral_quartets(molecular_system, selection='10<=group_index<=15', psi=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 77,  78,  79,  86],\n",
       "       [ 86,  87,  88,  92],\n",
       "       [ 92,  93,  94, 100],\n",
       "       [100, 101, 102, 104],\n",
       "       [104, 105, 106, 110]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "psi_chains"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Atoms chains defining $\\chi$ angles can be also extracted. Lets get, for instance, all $\\chi_{5}$ in the system:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "chi5_chains = msm.topology.get_dihedral_quartets(molecular_system, chi5=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There's a high number of ARG residues in our system. ARG is the only amino-acide with a $\\chi_{5}$ dihedral angle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "26\n"
     ]
    }
   ],
   "source": [
    "print(chi5_chains.shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "26\n"
     ]
    }
   ],
   "source": [
    "n_args = msm.get(molecular_system, element='group', selection='group_name==\"ARG\"', n_groups=True)\n",
    "print(n_args)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "phi, psi = msm.topology.get_dihedral_quartets(molecular_system, phi=True, psi=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[   2,    9,   10,   11],\n",
       "       [  11,   16,   17,   18],\n",
       "       [  18,   25,   26,   27],\n",
       "       ...,\n",
       "       [3789, 3796, 3797, 3798],\n",
       "       [3798, 3801, 3802, 3803],\n",
       "       [3803, 3808, 3809, 3810]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[   0,    1,    2,    9],\n",
       "       [   9,   10,   11,   16],\n",
       "       [  16,   17,   18,   25],\n",
       "       ...,\n",
       "       [3787, 3788, 3789, 3796],\n",
       "       [3796, 3797, 3798, 3801],\n",
       "       [3801, 3802, 3803, 3808]])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "psi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['C', 'N', 'CA', 'C']"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.get(molecular_system, element='atom', selection=phi[0], name=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the following tables a summary of the dihedral angle definitions are included in this document for future reference. The corresponding string taken by the input argument `dihedral_angle` is written down between parentesis next to each greek letter naming the angle: "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### $\\phi$ (`phi`)\n",
    "\n",
    "| Residue | Atoms | Zero value | Range (degrees)|\n",
    "| :---: | :---: | :---: | :---: |\n",
    "| all but PRO | C-N-CA-C | C cis to C | [-180, 180) |\n",
    "| PRO | C-N-CA-C | C cis to C | ~-90 |\n",
    "\n",
    "#### $\\psi$ (`psi`)\n",
    "\n",
    "| Residue | Atoms | Zero value | Range (degrees)|\n",
    "| :---: | :---: | :---: | :---: |\n",
    "| all | N-CA-C-N | N cis to N | [-180, 180) |\n",
    "\n",
    "#### $\\omega$ (`omega`)\n",
    "\n",
    "| Residue | Atoms | Zero value | Range (degrees)|\n",
    "| :---: | :---: | :---: | :---: |\n",
    "| all | CA-C-N-CA | CA cis to CA | ~180 |\n",
    "| all | CH3-C-N-CA | CA cis to CA | ~180 |\n",
    "| all | CA-C-N-CH3 | CA cis to CA | ~180 |\n",
    "\n",
    "#### $\\chi_{1}$ (`chi1`)\n",
    "\n",
    "| Residue | Atoms | Zero value | Range (degrees)|\n",
    "| :---: | :---: | :---: | :---: |\n",
    "| ARG | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| ASN | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| ASP | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| CYS | N-CA-CB-SG | SG cis to N | [-180, 180) |\n",
    "| GLN | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| GLU | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| HIS | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| ILE | N-CA-CB-CG1 | CG1 cis to N | [-180Â°, 180) |\n",
    "| LEU | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| LYS | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| MET | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| PHE | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| PRO | N-CA-CB-CG | CG cis to N | CA-CB is part of ring |\n",
    "| SER | N-CA-CB-OG | OG cis to N | [-180, 180) |\n",
    "| THR | N-CA-CB-OG1 | OG1 cis to N | [-180, 180) |\n",
    "| TRP | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| TYR | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| VAL | N-CA-CB-CG1 | CG1 cis to N | [-180, 180) |\n",
    "\n",
    "\n",
    "### $\\chi_{2}$ (`chi2`)\n",
    "\n",
    "| Residue | Atoms | Zero value | Range (degrees)|\n",
    "| :---: | :---: | :---: | :---: |\n",
    "| ARG | CA-CB-CG-CD  | CD cis to CA     | [-180, 180) |\n",
    "| ASN | CA-CB-CG-OD1 | OD1 cis to CA    | [-180, 180) |\n",
    "| ASP | CA-CB-CG-OD  | OD1 cis to CA    | [-180, 180) |\n",
    "| GLN | CA-CB-CG-CD  | CD cis to CA     | [-180, 180) |\n",
    "| GLU | CA-CB-CG-CD  | CD cis to CA     | [-180, 180) |\n",
    "| HIS | CA-CB-CG-ND1 | ND1 cis to CA    | [-180, 180) |\n",
    "| ILE | CA-CB-CG1-CD | CD cis to CA     | [-180, 180) |\n",
    "| LEU | CA-CB-CG-CD1 | CD1 cis to CA    | [-180, 180) |\n",
    "| LYS | CA-CB-CG-CD  | CD cis to CA     | [-180, 180) |\n",
    "| MET | CA-CB-CG-SD  | SD cis to CA     | [-180, 180) |\n",
    "| PHE | CA-CB-CG-CD  | CD1 cis to CA    | [-180, 180) |\n",
    "| PRO | CA-CB-CG-CD  | CD cis to CA     | CB-CG is part of ring |\n",
    "| TRP | CA-CB-CG-CD1 | CD1 cis to CA    | [-180, 180) |\n",
    "| TYR | CA-CB-CG-CD1 | CD1 cis to CA    | [-180, 180) |\n",
    "\n",
    "#### $\\chi_{3}$ (`chi3`)\n",
    "\n",
    "| Residue | Atoms | Zero value | Range (degrees)|\n",
    "| :---: | :---: | :---: | :---: |\n",
    "| ARG | CB-CG-CD-NE  | NE cis to CB     | [-180, 180) |\n",
    "| GLN | CB-CG-CD-OE1 | OE1 cis to CB    | [-180, 180) |\n",
    "| GLU | CB-CG-CD-OE1 | OE1 cis to CB    | [-180, 180) |\n",
    "| LYS | CB-CG-CD-CE  | CE cis to CB     | [-180, 180) |\n",
    "| MET | CB-CG-SD-CE  | CE cis to CB     | [-180, 180) |\n",
    "\n",
    "#### $\\chi_{4}$ (`chi4`)\n",
    "\n",
    "| Residue | Atoms | Zero value | Range (degrees)|\n",
    "| :---: | :---: | :---: | :---: |\n",
    "| ARG | CG-CD-NE-CZ | CZ cis to CG      | [-180, 180) |\n",
    "| LYS | CG-CD-CE-NZ | NZ cis to CG      | [-180, 180) |\n",
    "\n",
    "#### $\\chi_{5}$ (`chi5`)\n",
    "\n",
    "| Residue | Atoms | Zero value | Range (degrees)|\n",
    "| :---: | :---: | :---: | :---: |\n",
    "| ARG | CD-NE-CZ-NH1 | NH1 cis to CD    | [-180, 180) |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Every dihedral angle is defined in a peptide by three vectors delimited by four consecutive covalently bonded atoms. The vector in the middle defines the orthogonal plane where rotations are defined by the projection of vectors first and third, this way two blocks of atoms change its relative positions: all atoms covalently bonded before and after the second vector in the polymer. Or explained in other words, removing the second vector two sets of covalently bonded atoms are defined. Each of these two atoms sets move in unison when the dihedral angle changes. MolSysMT includes the input argument `with_blocks` for the method `molsysmt.covalent_dihedral_quartets` to return these atoms sets together with the quartets. Lets see how it works with an example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "molecular_system = msm.convert(msm.systems['Met-enkephalin']['met_enkephalin.h5msm'], to_form='molsysmt.MolSys')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "phi_chains, phi_blocks = msm.topology.get_dihedral_quartets(molecular_system, with_blocks=True, phi=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets for instance have a look to the quartet defining the 3-th $\\phi$ angle:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "363ca02f158d46cc93c9aa334c6dec5d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "view = msm.view(molecular_system, viewer='NGLView')\n",
    "selection_quartet = msm.select(molecular_system, selection=phi_chains[2], to_syntax='NGLView')\n",
    "view.clear()\n",
    "view.add_licorice(color='white')\n",
    "view.add_ball_and_stick(selection_quartet, color='orange')\n",
    "view"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([33, 35, 37, 53])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phi_chains[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36},\n",
       "       {37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71}],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phi_blocks[2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets show in blue and red the two blocks of atoms defined by this 4-th $\\phi$ dihedral angle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "29b70178b5074945bedc7bc1edcde83c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "view = msm.view(molecular_system, viewer='NGLView')\n",
    "view.clear()\n",
    "selection_quartet = msm.select(molecular_system, selection=phi_chains[2], to_syntax='NGLView')\n",
    "selection_block_0 = msm.select(molecular_system, selection=list(phi_blocks[2][0]), to_syntax='NGLView')\n",
    "selection_block_1 = msm.select(molecular_system, selection=list(phi_blocks[2][1]), to_syntax='NGLView')\n",
    "view.add_licorice(color='white')\n",
    "view.add_ball_and_stick(selection_quartet, color='orange')\n",
    "view.add_ball_and_stick(selection_block_0, color='red')\n",
    "view.add_ball_and_stick(selection_block_1, color='blue')\n",
    "view"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
