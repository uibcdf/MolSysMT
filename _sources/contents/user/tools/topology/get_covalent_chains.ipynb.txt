{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7e0201d71e294096a650a60d88cd7318",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import molsysmt as msm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Get covalent chains\n",
    "\n",
    "Lets load first of all a molecular system to work with in this section:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "molecular_system = msm.systems['TcTIM']['1tcd.h5msm']\n",
    "molecular_system = msm.convert(molecular_system)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "</style>\n",
       "<table id=\"T_70bed\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th id=\"T_70bed_level0_col0\" class=\"col_heading level0 col0\" >form</th>\n",
       "      <th id=\"T_70bed_level0_col1\" class=\"col_heading level0 col1\" >n_atoms</th>\n",
       "      <th id=\"T_70bed_level0_col2\" class=\"col_heading level0 col2\" >n_groups</th>\n",
       "      <th id=\"T_70bed_level0_col3\" class=\"col_heading level0 col3\" >n_components</th>\n",
       "      <th id=\"T_70bed_level0_col4\" class=\"col_heading level0 col4\" >n_chains</th>\n",
       "      <th id=\"T_70bed_level0_col5\" class=\"col_heading level0 col5\" >n_molecules</th>\n",
       "      <th id=\"T_70bed_level0_col6\" class=\"col_heading level0 col6\" >n_entities</th>\n",
       "      <th id=\"T_70bed_level0_col7\" class=\"col_heading level0 col7\" >n_waters</th>\n",
       "      <th id=\"T_70bed_level0_col8\" class=\"col_heading level0 col8\" >n_proteins</th>\n",
       "      <th id=\"T_70bed_level0_col9\" class=\"col_heading level0 col9\" >n_structures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td id=\"T_70bed_row0_col0\" class=\"data row0 col0\" >molsysmt.MolSys</td>\n",
       "      <td id=\"T_70bed_row0_col1\" class=\"data row0 col1\" >3983</td>\n",
       "      <td id=\"T_70bed_row0_col2\" class=\"data row0 col2\" >662</td>\n",
       "      <td id=\"T_70bed_row0_col3\" class=\"data row0 col3\" >167</td>\n",
       "      <td id=\"T_70bed_row0_col4\" class=\"data row0 col4\" >4</td>\n",
       "      <td id=\"T_70bed_row0_col5\" class=\"data row0 col5\" >167</td>\n",
       "      <td id=\"T_70bed_row0_col6\" class=\"data row0 col6\" >2</td>\n",
       "      <td id=\"T_70bed_row0_col7\" class=\"data row0 col7\" >165</td>\n",
       "      <td id=\"T_70bed_row0_col8\" class=\"data row0 col8\" >2</td>\n",
       "      <td id=\"T_70bed_row0_col9\" class=\"data row0 col9\" >1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7ff852db7f70>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.info(molecular_system)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "MolSysMT includes a method to get all covalent chains found in the molecular system given by a sequence of atom names. To illustrate how the method `molsysmt.covalent_chains` works lets extract all segments of atoms C, N, CA an C covalently bound in this order (C-N-CA-C):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "covalent_chains =msm.topology.get_covalent_chains(molecular_system, chain=['atom_name==\"C\"',\n",
    "                                                                           'atom_name==\"N\"',\n",
    "                                                                           'atom_name==\"CA\"',\n",
    "                                                                           'atom_name==\"C\"'],\n",
    "                                                  selection=\"component_index==0\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(247, 4)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "covalent_chains.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The output is a numpy array 2-ranked where the dimension of the first axe or rank is the number of chains found in the system, and the second rank has dimension 4 (since it chain was chosen to have 4 atoms):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[   2,    9,   10,   11],\n",
       "       [  11,   16,   17,   18],\n",
       "       [  18,   25,   26,   27],\n",
       "       [  27,   32,   33,   34],\n",
       "       [  34,   40,   41,   42],\n",
       "       [  42,   45,   46,   47],\n",
       "       [  47,   50,   51,   52],\n",
       "       [  52,   55,   56,   57],\n",
       "       [  57,   63,   64,   65],\n",
       "       [  65,   77,   78,   79],\n",
       "       [  79,   86,   87,   88],\n",
       "       [  88,   92,   93,   94],\n",
       "       [  94,  100,  101,  102],\n",
       "       [ 102,  104,  105,  106],\n",
       "       [ 106,  110,  111,  112],\n",
       "       [ 112,  119,  120,  121],\n",
       "       [ 121,  125,  126,  127],\n",
       "       [ 127,  133,  134,  135],\n",
       "       [ 135,  141,  142,  143],\n",
       "       [ 143,  148,  149,  150],\n",
       "       [ 150,  155,  156,  157],\n",
       "       [ 157,  163,  164,  165],\n",
       "       [ 165,  171,  172,  173],\n",
       "       [ 173,  180,  181,  182],\n",
       "       [ 182,  187,  188,  189],\n",
       "       [ 189,  195,  196,  197],\n",
       "       [ 197,  203,  204,  205],\n",
       "       [ 205,  208,  209,  210],\n",
       "       [ 210,  213,  214,  215],\n",
       "       [ 215,  220,  221,  222],\n",
       "       [ 222,  231,  232,  233],\n",
       "       [ 233,  239,  240,  241],\n",
       "       [ 241,  249,  250,  251],\n",
       "       [ 251,  257,  258,  259],\n",
       "       [ 259,  264,  265,  266],\n",
       "       [ 266,  273,  274,  275],\n",
       "       [ 275,  279,  280,  281],\n",
       "       [ 281,  286,  287,  288],\n",
       "       [ 288,  293,  294,  295],\n",
       "       [ 295,  298,  299,  300],\n",
       "       [ 300,  305,  306,  307],\n",
       "       [ 307,  312,  313,  314],\n",
       "       [ 314,  323,  324,  325],\n",
       "       [ 325,  331,  332,  333],\n",
       "       [ 333,  341,  342,  343],\n",
       "       [ 343,  349,  350,  351],\n",
       "       [ 351,  356,  357,  358],\n",
       "       [ 358,  364,  365,  366],\n",
       "       [ 366,  371,  372,  373],\n",
       "       [ 373,  380,  381,  382],\n",
       "       [ 382,  385,  386,  387],\n",
       "       [ 387,  396,  397,  398],\n",
       "       [ 398,  404,  405,  406],\n",
       "       [ 406,  411,  412,  413],\n",
       "       [ 413,  419,  420,  421],\n",
       "       [ 421,  426,  427,  428],\n",
       "       [ 428,  435,  436,  437],\n",
       "       [ 437,  446,  447,  448],\n",
       "       [ 448,  455,  456,  457],\n",
       "       [ 457,  463,  464,  465],\n",
       "       [ 465,  468,  469,  470],\n",
       "       [ 470,  473,  474,  475],\n",
       "       [ 475,  482,  483,  484],\n",
       "       [ 484,  490,  491,  492],\n",
       "       [ 492,  495,  496,  497],\n",
       "       [ 497,  503,  504,  505],\n",
       "       [ 505,  510,  511,  512],\n",
       "       [ 512,  521,  522,  523],\n",
       "       [ 523,  527,  528,  529],\n",
       "       [ 529,  531,  532,  533],\n",
       "       [ 533,  536,  537,  538],\n",
       "       [ 538,  547,  548,  549],\n",
       "       [ 549,  554,  555,  556],\n",
       "       [ 556,  558,  559,  560],\n",
       "       [ 560,  567,  568,  569],\n",
       "       [ 569,  574,  575,  576],\n",
       "       [ 576,  580,  581,  582],\n",
       "       [ 582,  588,  589,  590],\n",
       "       [ 590,  597,  598,  599],\n",
       "       [ 599,  605,  606,  607],\n",
       "       [ 607,  613,  614,  615],\n",
       "       [ 615,  622,  623,  624],\n",
       "       [ 624,  630,  631,  632],\n",
       "       [ 632,  642,  643,  644],\n",
       "       [ 644,  646,  647,  648],\n",
       "       [ 648,  654,  655,  656],\n",
       "       [ 656,  660,  661,  662],\n",
       "       [ 662,  674,  675,  676],\n",
       "       [ 676,  681,  682,  683],\n",
       "       [ 683,  688,  689,  690],\n",
       "       [ 690,  696,  697,  698],\n",
       "       [ 698,  700,  701,  702],\n",
       "       [ 702,  710,  711,  712],\n",
       "       [ 712,  716,  717,  718],\n",
       "       [ 718,  725,  726,  727],\n",
       "       [ 727,  736,  737,  738],\n",
       "       [ 738,  747,  748,  749],\n",
       "       [ 749,  755,  756,  757],\n",
       "       [ 757,  767,  768,  769],\n",
       "       [ 769,  779,  780,  781],\n",
       "       [ 781,  783,  784,  785],\n",
       "       [ 785,  792,  793,  794],\n",
       "       [ 794,  799,  800,  801],\n",
       "       [ 801,  807,  808,  809],\n",
       "       [ 809,  816,  817,  818],\n",
       "       [ 818,  824,  825,  826],\n",
       "       [ 826,  831,  832,  833],\n",
       "       [ 833,  836,  837,  838],\n",
       "       [ 838,  845,  846,  847],\n",
       "       [ 847,  854,  855,  856],\n",
       "       [ 856,  861,  862,  863],\n",
       "       [ 863,  866,  867,  868],\n",
       "       [ 868,  875,  876,  877],\n",
       "       [ 877,  880,  881,  882],\n",
       "       [ 882,  886,  887,  888],\n",
       "       [ 888,  891,  892,  893],\n",
       "       [ 893,  896,  897,  898],\n",
       "       [ 898,  900,  901,  902],\n",
       "       [ 902,  911,  912,  913],\n",
       "       [ 913,  921,  922,  923],\n",
       "       [ 923,  928,  929,  930],\n",
       "       [ 930,  936,  937,  938],\n",
       "       [ 938,  943,  944,  945],\n",
       "       [ 945,  949,  950,  951],\n",
       "       [ 951,  956,  957,  958],\n",
       "       [ 958,  960,  961,  962],\n",
       "       [ 962,  969,  970,  971],\n",
       "       [ 971,  976,  977,  978],\n",
       "       [ 978,  984,  985,  986],\n",
       "       [ 986,  993,  994,  995],\n",
       "       [ 995, 1002, 1003, 1004],\n",
       "       [1004, 1013, 1014, 1015],\n",
       "       [1015, 1022, 1023, 1024],\n",
       "       [1024, 1027, 1028, 1029],\n",
       "       [1029, 1031, 1032, 1033],\n",
       "       [1033, 1042, 1043, 1044],\n",
       "       [1044, 1049, 1050, 1051],\n",
       "       [1051, 1054, 1055, 1056],\n",
       "       [1056, 1059, 1060, 1061],\n",
       "       [1061, 1066, 1067, 1068],\n",
       "       [1068, 1073, 1074, 1075],\n",
       "       [1075, 1081, 1082, 1083],\n",
       "       [1083, 1088, 1089, 1090],\n",
       "       [1090, 1097, 1098, 1099],\n",
       "       [1099, 1105, 1106, 1107],\n",
       "       [1107, 1110, 1111, 1112],\n",
       "       [1112, 1115, 1116, 1117],\n",
       "       [1117, 1122, 1123, 1124],\n",
       "       [1124, 1127, 1128, 1129],\n",
       "       [1129, 1136, 1137, 1138],\n",
       "       [1138, 1145, 1146, 1147],\n",
       "       [1147, 1153, 1154, 1155],\n",
       "       [1155, 1159, 1160, 1161],\n",
       "       [1161, 1168, 1169, 1170],\n",
       "       [1170, 1177, 1178, 1179],\n",
       "       [1179, 1182, 1183, 1184],\n",
       "       [1184, 1196, 1197, 1198],\n",
       "       [1198, 1202, 1203, 1204],\n",
       "       [1204, 1213, 1214, 1215],\n",
       "       [1215, 1220, 1221, 1222],\n",
       "       [1222, 1227, 1228, 1229],\n",
       "       [1229, 1235, 1236, 1237],\n",
       "       [1237, 1240, 1241, 1242],\n",
       "       [1242, 1252, 1253, 1254],\n",
       "       [1254, 1261, 1262, 1263],\n",
       "       [1263, 1268, 1269, 1270],\n",
       "       [1270, 1275, 1276, 1277],\n",
       "       [1277, 1289, 1290, 1291],\n",
       "       [1291, 1294, 1295, 1296],\n",
       "       [1296, 1302, 1303, 1304],\n",
       "       [1304, 1306, 1307, 1308],\n",
       "       [1308, 1313, 1314, 1315],\n",
       "       [1315, 1317, 1318, 1319],\n",
       "       [1319, 1326, 1327, 1328],\n",
       "       [1328, 1333, 1334, 1335],\n",
       "       [1335, 1338, 1339, 1340],\n",
       "       [1340, 1345, 1346, 1347],\n",
       "       [1347, 1352, 1353, 1354],\n",
       "       [1354, 1361, 1362, 1363],\n",
       "       [1363, 1370, 1371, 1372],\n",
       "       [1372, 1375, 1376, 1377],\n",
       "       [1377, 1384, 1385, 1386],\n",
       "       [1386, 1393, 1394, 1395],\n",
       "       [1395, 1400, 1401, 1402],\n",
       "       [1402, 1410, 1411, 1412],\n",
       "       [1412, 1419, 1420, 1421],\n",
       "       [1421, 1427, 1428, 1429],\n",
       "       [1429, 1435, 1436, 1437],\n",
       "       [1437, 1446, 1447, 1448],\n",
       "       [1448, 1457, 1458, 1459],\n",
       "       [1459, 1471, 1472, 1473],\n",
       "       [1473, 1478, 1479, 1480],\n",
       "       [1480, 1489, 1490, 1491],\n",
       "       [1491, 1495, 1496, 1497],\n",
       "       [1497, 1504, 1505, 1506],\n",
       "       [1506, 1512, 1513, 1514],\n",
       "       [1514, 1516, 1517, 1518],\n",
       "       [1518, 1523, 1524, 1525],\n",
       "       [1525, 1531, 1532, 1533],\n",
       "       [1533, 1539, 1540, 1541],\n",
       "       [1541, 1544, 1545, 1546],\n",
       "       [1546, 1549, 1550, 1551],\n",
       "       [1551, 1558, 1559, 1560],\n",
       "       [1560, 1566, 1567, 1568],\n",
       "       [1568, 1577, 1578, 1579],\n",
       "       [1579, 1585, 1586, 1587],\n",
       "       [1587, 1593, 1594, 1595],\n",
       "       [1595, 1605, 1606, 1607],\n",
       "       [1607, 1609, 1610, 1611],\n",
       "       [1611, 1613, 1614, 1615],\n",
       "       [1615, 1619, 1620, 1621],\n",
       "       [1621, 1626, 1627, 1628],\n",
       "       [1628, 1633, 1634, 1635],\n",
       "       [1635, 1638, 1639, 1640],\n",
       "       [1640, 1647, 1648, 1649],\n",
       "       [1649, 1655, 1656, 1657],\n",
       "       [1657, 1660, 1661, 1662],\n",
       "       [1662, 1671, 1672, 1673],\n",
       "       [1673, 1678, 1679, 1680],\n",
       "       [1680, 1686, 1687, 1688],\n",
       "       [1688, 1698, 1699, 1700],\n",
       "       [1700, 1707, 1708, 1709],\n",
       "       [1709, 1715, 1716, 1717],\n",
       "       [1717, 1726, 1727, 1728],\n",
       "       [1728, 1734, 1735, 1736],\n",
       "       [1736, 1742, 1743, 1744],\n",
       "       [1744, 1750, 1751, 1752],\n",
       "       [1752, 1754, 1755, 1756],\n",
       "       [1756, 1765, 1766, 1767],\n",
       "       [1767, 1773, 1774, 1775],\n",
       "       [1775, 1780, 1781, 1782],\n",
       "       [1782, 1784, 1785, 1786],\n",
       "       [1786, 1788, 1789, 1790],\n",
       "       [1790, 1793, 1794, 1795],\n",
       "       [1795, 1799, 1800, 1801],\n",
       "       [1801, 1807, 1808, 1809],\n",
       "       [1809, 1816, 1817, 1818],\n",
       "       [1818, 1823, 1824, 1825],\n",
       "       [1825, 1832, 1833, 1834],\n",
       "       [1834, 1843, 1844, 1845],\n",
       "       [1845, 1850, 1851, 1852],\n",
       "       [1852, 1859, 1860, 1861],\n",
       "       [1861, 1867, 1868, 1869],\n",
       "       [1869, 1875, 1876, 1877],\n",
       "       [1877, 1884, 1885, 1886],\n",
       "       [1886, 1889, 1890, 1891],\n",
       "       [1891, 1896, 1897, 1898]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "covalent_chains"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets check that the name of the atoms in any of the obtained chains is correct:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['C', 'N', 'CA', 'C']"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.get(molecular_system, element='atom', selection=covalent_chains[0], name=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The atom name specified at each place does not need to be unique, we can introduce variants at any position defining the covalent chain. Lets see for instance how to get all 4 atoms covalent chains where the first three atoms are C-N-CA, in this order, and the fourth atom can either be C or CB:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "covalent_chains =msm.topology.get_covalent_chains(molecular_system,\n",
    "                                                  chain=['atom_name==\"C\"', 'atom_name==\"N\"',\n",
    "                                                         'atom_name==\"CA\"', 'atom_name==[\"C\", \"CB\"]'],\n",
    "                                                    selection=\"component_index==0\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[   2,    9,   10,   11],\n",
       "       [   2,    9,   10,   13],\n",
       "       [  11,   16,   17,   18],\n",
       "       ...,\n",
       "       [1886, 1889, 1890, 1893],\n",
       "       [1891, 1896, 1897, 1898],\n",
       "       [1891, 1896, 1897, 1900]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "covalent_chains"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['C', 'N', 'CA', 'C']"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.get(molecular_system, element='atom', selection=covalent_chains[0], name=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['C', 'N', 'CA', 'CB']"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.get(molecular_system, element='atom', selection=covalent_chains[1], name=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The covalent chains defining the $\\phi$, $\\psi$, $\\omega$ and , $\\xi_1$ dihedral angles are obtained as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Covalent chains defining all phi dihedral angles in the molecular system\n",
    "phi_chains = msm.topology.get_covalent_chains(molecular_system, chain=['atom_name==\"C\"', 'atom_name==\"N\"',\n",
    "                                                          'atom_name==\"CA\"', 'atom_name==\"C\"'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Covalent chains defining all psi dihedral angles in the molecular system\n",
    "psi_chains = msm.topology.get_covalent_chains(molecular_system, chain=['atom_name==\"N\"', 'atom_name==\"CA\"',\n",
    "                                                          'atom_name==\"C\"', 'atom_name==\"N\"'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Covalent chains defining all omega dihedral angles in the molecular system\n",
    "omega_chains = msm.topology.get_covalent_chains(molecular_system, chain=['atom_name==[\"CA\",\"CH3\"]', 'atom_name==\"C\"',\n",
    "                                                            'atom_name==\"N\"', 'atom_name==[\"CA\", \"CH3\"]'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Covalent chains defining all chi1 dihedral angles in the molecular system\n",
    "chi1_chains = msm.topology.get_covalent_chains(molecular_system, chain=['atom_name==\"N\"', 'atom_name==\"CA\"',\n",
    "                                                           'atom_name==\"CB\"', 'atom_name==\"CG\"'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
