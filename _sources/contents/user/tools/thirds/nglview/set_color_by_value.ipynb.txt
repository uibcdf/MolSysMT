{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "98d13508-3d03-4d04-a7d6-27a8b6e6f7d0",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7fc95c0457094a7eb61da565f57eb2de",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# This cell is removed with the tag: \"remove-input\"\n",
    "# As such, it will not be shown in documentation\n",
    "\n",
    "from molsysmt.thirds.nglview import load_html_in_jupyter_notebook\n",
    "\n",
    "#import warnings\n",
    "#warnings.filterwarnings('ignore')\n",
    "\n",
    "nglview_static_dir = '../../../../_static/nglview/user/thirds/nglview/color_by_value/'\n",
    "nglview_htmlfile = None"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ed213c8-488c-4943-9aa1-eeeba27a81c5",
   "metadata": {},
   "source": [
    "(UserGuide_Thirds_NGLView_ColorByValue)=\n",
    "# Set color by value\n",
    "*Coloring elements by scalar values*\n",
    "\n",
    "[NGLView](https://github.com/nglviewer/nglview) is a very flexible and versatile tool. Just have a look to [its documentation](http://nglviewer.org/nglview/latest/), or to the wonderful [Q&A discussion in the GitHub repository](https://github.com/nglviewer/nglview/discussions). Nervertheless, and in spite of being strictly unnecessary, MolSysMT wants to contribute with some shortcuts and tools. For instance, the color of elements such as atoms, or groups, can be set in a representation according to their scalar values in a list and a color map. The function {func}`molsysmt.thirds.nglview.color_by_value` is helpful for this purpose. Let's see a couple of examples:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bc0f835d-ba4c-4bf1-92e3-8c31bdc978aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "import molsysmt as msm\n",
    "\n",
    "molecular_system = msm.convert('181L', selection='molecule_type==\"protein\"')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "490cc86d-3678-47a5-9a97-ceaee2facc2c",
   "metadata": {},
   "source": [
    "Once we have a protein, the charge of its aminoacids can be obtained with the function {func}`molsysmt.physchem.charge`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5ffc0494-72c7-4bf2-aeb3-c3373a2c7594",
   "metadata": {},
   "outputs": [],
   "source": [
    "charge_residues = msm.physchem.get_charge(molecular_system, element='group', definition='physical_pH7')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9f15ac94-ce1c-4515-921a-abef2c1d9224",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table><tbody><tr><th>Magnitude</th><td style='text-align:left;'><pre>[0.0 0.0 0.0 0.0 -1.0 0.0 0.0 1.0 0.0 -1.0 -1.0 0.0 0.0 1.0 0.0 1.0 0.0 0.0 1.0 -1.0 0.0 -1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.1 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 -1.0 0.0 -1.0 1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 -1.0 -1.0 0.0 -1.0 1.0 0.0 0.0 0.0 0.0 -1.0 0.0 -1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0 0.0 0.0 1.0 0.0 1.0 0.0 0.0 0.0 -1.0 0.0 0.0 -1.0 0.0 0.0 1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 1.0 1.0 0.0 -1.0 -1.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 1.0 1.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 -1.0 0.0 0.0 1.0]</pre></td></tr><tr><th>Units</th><td style='text-align:left;'>elementary_charge</td></tr></tbody></table>"
      ],
      "text/latex": [
       "$\\begin{pmatrix} &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  & \\end{pmatrix}\\ \\mathrm{elementary\\_charge}$"
      ],
      "text/plain": [
       "<Quantity([ 0.   0.   0.   0.  -1.   0.   0.   1.   0.  -1.  -1.   0.   0.   1.\n",
       "  0.   1.   0.   0.   1.  -1.   0.  -1.   0.   0.   0.   0.   0.   0.\n",
       "  0.   0.   0.1  0.   0.   0.   1.   0.   0.   0.   0.   0.   0.   0.\n",
       "  1.   0.  -1.   0.  -1.   1.   0.   0.   0.   1.   0.   0.   0.   0.\n",
       "  0.   0.   0.   1.  -1.  -1.   0.  -1.   1.   0.   0.   0.   0.  -1.\n",
       "  0.  -1.   0.   0.   0.   1.   0.   0.   0.   1.   0.   0.   1.   0.\n",
       "  1.   0.   0.   0.  -1.   0.   0.  -1.   0.   0.   1.   1.   0.   0.\n",
       "  0.   0.   0.   0.   0.   0.   0.   0.   0.  -1.   0.   0.   0.   0.\n",
       "  0.   0.   0.   0.   0.   0.   1.   0.   0.   0.   0.   1.   1.   0.\n",
       " -1.  -1.   0.   0.   0.   0.   0.   0.   1.   0.   1.   0.   0.   0.\n",
       "  0.   0.   0.   0.   1.   0.   1.   1.   0.   0.   0.   0.   0.   1.\n",
       "  0.   0.   0.   0.  -1.   0.   0.   1. ], 'elementary_charge')>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "charge_residues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9767c1fe-9db2-4bdc-a997-7fee614fc1a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "msm.pyunitwizard.get_value(charge_residues)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2768e68-810b-43f2-af90-928add738d16",
   "metadata": {},
   "source": [
    "Let's make an NGLView view with a cartoon representation colored according to the amino acids charge. The first step is choosing, or making your own, matplotlib color map:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf5112d5-d781-4c57-bae8-0d3b4795cb5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib.pyplot import colormaps\n",
    "blue_white_red = colormaps['bwr']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "11d0c570-786d-4332-baff-a5ded5af6e94",
   "metadata": {},
   "outputs": [],
   "source": [
    "blue_white_red"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77d35fb2-554c-46ad-9fb7-5890d72a0603",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "print(' ')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e1395b0-b142-49e3-827e-0c02933bfc9a",
   "metadata": {},
   "source": [
    "```{admonition} Tip\n",
    ":class: tip\n",
    "Have a look to the Matplotlib documentation: [Choosing Colormaps in Matplotlib](https://matplotlib.org/stable/tutorials/colors/colormaps.html) and [Creating Colormaps in Matplotlib](https://matplotlib.org/stable/tutorials/colors/colormap-manipulation.html).\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "793c9658-92a4-450d-a3d1-d94326213c71",
   "metadata": {},
   "source": [
    "The second step is getting an NGLWidget object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5a8f68a3-85ff-4e0c-8f64-246b3b7556bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "view = msm.view(molecular_system)\n",
    "view.clear()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92c35143-708c-430a-893d-f7d346ad6ffb",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "# This cell is removed with the tag: \"remove-input\"\n",
    "# As such, it will not be shown in documentation\n",
    "\n",
    "nglview_htmlfile = nglview_static_dir+'charge.html'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f95587f-93a9-45b0-bd64-9d78c769f2cc",
   "metadata": {},
   "source": [
    "The colored representation can be then added to the view:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c882e00-8eec-48b3-938f-21f015a33a28",
   "metadata": {},
   "outputs": [],
   "source": [
    "msm.thirds.nglview.set_color_by_value(view, charge_residues, element='group', cmap=blue_white_red, representation='cartoon')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58b25941-5878-4f07-a0c2-c4bbef12f0f9",
   "metadata": {},
   "source": [
    "And finally, the NGLView can be shown:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c81307d-8c28-4884-a626-79650dde12b6",
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [],
   "source": [
    "view"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3e5a9da3-d639-452d-8352-00b34a040a3b",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "load_html_in_jupyter_notebook(nglview_static_dir+'charge.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3de3bba9-bb8f-4f48-8095-808f7dfad864",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "b96aaad6-7178-4bf6-9fef-9db5e54dc5e8",
   "metadata": {},
   "source": [
    "Let's illustrate the use of {func}`molsysmt.thirds.nglview.color_by_value` with another example. This time, let's color a licorice representation with the b-factor of each atom:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c8a5cc2-42b6-41b5-af56-d32793da49d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "b_factors = msm.get(molecular_system, element='atom', b_factor=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f889d31-0cc9-4f55-aa12-a4993331c16c",
   "metadata": {},
   "outputs": [],
   "source": [
    "white_blue_purple = colormaps['BuPu']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5fb7178b-3041-4a4d-b74d-015351954b17",
   "metadata": {},
   "outputs": [],
   "source": [
    "white_blue_purple"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4cef1079-9e8b-4ab8-85b8-924513101ab0",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "print(' ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05e5e813-8849-462e-a0c9-f3acc79b33fd",
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [],
   "source": [
    "view = msm.view(molecular_system)\n",
    "view.clear()\n",
    "msm.thirds.nglview.color_by_value(view, b_factors[0], element='atom', cmap=white_blue_purple, representation='ball_and_stick',\n",
    "                                 min_value=0.0, max_value=max(b_factors[0]))\n",
    "view"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a45bdf0-d3ff-474a-b401-540f653f8519",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "load_html_in_jupyter_notebook(nglview_static_dir+'b_factors.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1bf8793c-1c99-4b84-a016-d20336b4b3bd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "099957e9-5769-413c-a003-ab7bd4ccdfdb",
   "metadata": {},
   "source": [
    "```{admonition} See also\n",
    ":class: attention\n",
    "{func}`molsysmt.thirds.nglview.color_by_value`, {func}`molsysmt.basic.convert`, {func}`molsysmt.physchem.charge`, {func}`molsysmt.basic.get`, {func}`molsysmt.basic.view`\n",
    "```"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
