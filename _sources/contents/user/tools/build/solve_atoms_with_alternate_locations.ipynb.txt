{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6590f96f-638f-44cb-b05b-9f200f20d48a",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [],
   "source": [
    "# This cell is removed with the tag: \"remove-input\"\n",
    "# As such, it will not be shown in documentation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f6cd114-c906-428f-b51f-3f7ff6267132",
   "metadata": {},
   "source": [
    "(UserGuide_Tools_Build_SolveAtomsWithAlternateLocations)=\n",
    "# Solve atoms with alternate locations\n",
    "\n",
    "*choose coordinates for atoms with alternate locations.*\n",
    "\n",
    "Structures solved experimentally and deposited in the Protein Data Bank can have atoms with multiple locations. MolSysMT includes a function in the 'build' module to solve this ambiguity: {func}`molsysmt.build.solve_atoms_with_alternate_locations`\n",
    "\n",
    "To illustrate how this function work, let's check if the molecular system with PDB id 1BRS has atoms with alternate locations:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6adf00c2-88d8-4a4e-8e8c-afb8b8371be2",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c6cc4ede3fa04ddbbf5ca863b028d395",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import molsysmt as msm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "50ce93dd-09d5-475f-8615-b90985c3dbc8",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{2686: {'location_id': array(['A', 'B'], dtype=object),\n",
       "   'occupancy': array([0.5, 0.5]),\n",
       "   'b_factor': <Quantity([0.2466 0.2467], 'nanometer ** 2')>,\n",
       "   'atom_id': [2687, 2688],\n",
       "   'coordinates': <Quantity([[3.2742 2.2579 0.1536]\n",
       "    [3.2757 2.2571 0.1533]], 'nanometer')>},\n",
       "  2687: {'location_id': array(['A', 'B'], dtype=object),\n",
       "   'occupancy': array([0.5, 0.5]),\n",
       "   'b_factor': <Quantity([0.2594 0.2596], 'nanometer ** 2')>,\n",
       "   'atom_id': [2689, 2690],\n",
       "   'coordinates': <Quantity([[3.1412 2.241  0.1076]\n",
       "    [3.3396 2.192  0.2619]], 'nanometer')>}}]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.get('1BRS', alternate_location=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6368969-b0ed-41e4-8847-c77e5a222b58",
   "metadata": {},
   "source": [
    "MolSysMT returns the info about alternate locations as a list of dictionaries where the keys are the indices of the atoms with more than an atom_id, occupancy, b_factor and coordinates (stored in a dictionary in the corresponding values).\n",
    "\n",
    "We know then that 1BRS has a structure with two atoms with alternate location. Let's load the system as a 'molsysmt.MolSys' object to see how to deal with this situation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "36127e9e-6811-4c65-bf88-b51c121b5265",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "molecular_system = msm.convert('pdb_id:1BRS', to_form='molsysmt.MolSys')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf030097-4413-4f9f-b800-95f48a10ebfe",
   "metadata": {},
   "source": [
    "The resulting object still keeps the information about the alternate locations:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4bde75d2-8ca2-4be8-bdb1-e68d1f26e9fe",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{2686: {'location_id': array(['A', 'B'], dtype=object),\n",
       "   'occupancy': array([0.5, 0.5]),\n",
       "   'b_factor': <Quantity([0.2466 0.2467], 'nanometer ** 2')>,\n",
       "   'atom_id': [2687, 2688],\n",
       "   'coordinates': <Quantity([[3.2742 2.2579 0.1536]\n",
       "    [3.2757 2.2571 0.1533]], 'nanometer')>}}]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.get(molecular_system, element='atom', selection='atom_index==2686', alternate_location=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9bfe518-e510-44f4-a382-a460d031d9f1",
   "metadata": {},
   "source": [
    "When a molecular system has atoms with alternate locations, by default, MolSysMT always takes those with the highest occupancy. In case there is not highest occupancy value, the location_id \"A\" is choosen."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "26ad189a-fca2-4ed4-bb2a-1f4a9f0d36af",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table><tbody><tr><th>Magnitude</th><td style='text-align:left;'><pre>[[[3.2741999999999996 2.2579 0.1536]]]</pre></td></tr><tr><th>Units</th><td style='text-align:left;'>nanometer</td></tr></tbody></table>"
      ],
      "text/latex": [
       "$arr[,0,:,:] = \\begin{pmatrix} &  & \\end{pmatrix}\\ \\mathrm{nanometer}$"
      ],
      "text/plain": [
       "<Quantity([[[3.2742 2.2579 0.1536]]], 'nanometer')>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.get(molecular_system, element='atom', selection=2686, coordinates=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d113176-f2a2-4425-bd5a-336c3bf85530",
   "metadata": {},
   "source": [
    "How can we choose a different location for a specific atom? {func}`molsysmt.build.solve_atoms_with_alternate_locations` can help to do it. Let's for instance change all atoms to alternate location \"B\" to show how this function works:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "eb030ee7-532d-4047-9ceb-cb4e1a3f6f9c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "msm.build.solve_atoms_with_alternate_location(molecular_system, location_id='B')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "fe117efe-62d6-49a9-a621-13989777b7ab",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[2688], <Quantity([[[3.2757 2.2571 0.1533]]], 'nanometer')>]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.get(molecular_system, element='atom', selection=2686, atom_id=True, coordinates=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84811ca9-0dc5-48d2-aadd-167889da8220",
   "metadata": {},
   "source": [
    "The function {func}`molsysmt.build.solve_atoms_with_alternate_locations` accepts the input argument 'selection' in case different location ids need to be provided for different atoms:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fdba0f6c-a9f3-4bdc-b937-4c949d53fb6e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "msm.build.solve_atoms_with_alternate_location(molecular_system, selection=[2686,2687], location_id=['A','B'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a56c48ab-6512-45d7-aca2-a67f7f52eb84",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[2687, 2690],\n",
       " <Quantity([[[3.2742 2.2579 0.1536]\n",
       "   [3.3396 2.192  0.2619]]], 'nanometer')>]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.get(molecular_system, element='atom', selection=[2686,2687], atom_id=True, coordinates=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6dd8830a-cb70-4022-9084-ce139bdee3af",
   "metadata": {},
   "source": [
    "The input argument 'location_id' accepts an extra value: 'occupancy'. With 'occupancy' each atom takes the location with highest occupancy, or the location id equal to 'A' in case all occupancy values are equal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7573bae6-36c5-4e94-9292-947dc174d663",
   "metadata": {},
   "outputs": [],
   "source": [
    "msm.build.solve_atoms_with_alternate_location(molecular_system, selection=[2686,2687], location_id='occupancy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e6e7c8c0-d273-44a3-813b-a8e813eef3e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[2687, 2689],\n",
       " <Quantity([[[3.2742 2.2579 0.1536]\n",
       "   [3.1412 2.241  0.1076]]], 'nanometer')>]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.get(molecular_system, element='atom', selection=[2686,2687], atom_id=True, coordinates=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8ff3b9e-0c6c-4ea3-ab28-2edbc251a5e4",
   "metadata": {},
   "source": [
    "```{admonition} Warning\n",
    ":class: danger\n",
    "Some molecular system's forms can not keep alternate location data once these atoms are solved. With this forms the function {func}`molsysmt.build.solve_atoms_with_alternate_locations` can only be applied once. This is the case of forms such as 'string:pdb_text', 'string:pdb_id' or 'file:pdb'.\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbe902ea-82a0-44b7-a16e-fd552ac1783b",
   "metadata": {},
   "source": [
    "```{admonition} See also\n",
    ":class: attention\n",
    "{func}`molsysmt.build.solve_atoms_with_alternate_location`, {func}`molsysmt.basic.get`, {func}`molsysmt.basic.get`\n",
    "```"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
