Traceback (most recent call last):
  File "/home/runner/micromamba/envs/docs/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/runner/micromamba/envs/docs/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/micromamba/envs/docs/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/micromamba/envs/docs/lib/python3.12/asyncio/base_events.py", line 691, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/runner/micromamba/envs/docs/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/runner/micromamba/envs/docs/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/micromamba/envs/docs/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
msm.molecular_mechanics.get_potential_energy(molecular_system)
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mOpenMMException[0m                           Traceback (most recent call last)
[0;32m/tmp/ipykernel_6578/1833146036.py[0m in [0;36m?[0;34m()[0m
[0;32m----> 1[0;31m [0mmsm[0m[0;34m.[0m[0mmolecular_mechanics[0m[0;34m.[0m[0mget_potential_energy[0m[0;34m([0m[0mmolecular_system[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m~/micromamba/envs/docs/lib/python3.12/site-packages/molsysmt/_private/digestion/digest.py[0m in [0;36m?[0;34m(*args, **kwargs)[0m
[1;32m    118[0m [0;34m[0m[0m
[1;32m    119[0m             [0;32mif[0m [0;34m'self'[0m [0;32min[0m [0mall_args[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    120[0m                 [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0mall_args[0m[0;34m[[0m[0;34m'self'[0m[0;34m][0m[0;34m,[0m [0;34m**[0m[0mfinal_args[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    121[0m             [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 122[0;31m                 [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0;34m**[0m[0mfinal_args[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m~/micromamba/envs/docs/lib/python3.12/site-packages/molsysmt/molecular_mechanics/get_potential_energy.py[0m in [0;36m?[0;34m(molecular_system, selection, decomposition, platform, engine, syntax)[0m
[1;32m     62[0m             [0;32mfor[0m [0matt[0m [0;32min[0m [0mpossible_missing_attributes[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     63[0m                 [0;32mif[0m [0;32mnot[0m [0mhas_attribute[0m[0;34m([0m[0mmolecular_system[0m[0;34m,[0m [0matt[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     64[0m                     [0mextra_conversion_arguments[0m[0;34m[[0m[0matt[0m[0;34m][0m[0;34m=[0m[0mdefault_attribute[0m[0;34m[[0m[0matt[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[1;32m     65[0m [0;34m[0m[0m
[0;32m---> 66[0;31m             context = convert(molecular_system, to_form='openmm.Context', selection=selection,
[0m[1;32m     67[0m                     [0msyntax[0m[0;34m=[0m[0msyntax[0m[0;34m,[0m [0;34m**[0m[0mextra_conversion_arguments[0m[0;34m,[0m [0mplatform[0m[0;34m=[0m[0mplatform[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     68[0m [0;34m[0m[0m
[1;32m     69[0m         [0;32mif[0m [0mdecomposition[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/micromamba/envs/docs/lib/python3.12/site-packages/molsysmt/_private/digestion/digest.py[0m in [0;36m?[0;34m(*args, **kwargs)[0m
[1;32m    118[0m [0;34m[0m[0m
[1;32m    119[0m             [0;32mif[0m [0;34m'self'[0m [0;32min[0m [0mall_args[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    120[0m                 [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0mall_args[0m[0;34m[[0m[0;34m'self'[0m[0;34m][0m[0;34m,[0m [0;34m**[0m[0mfinal_args[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    121[0m             [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 122[0;31m                 [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0;34m**[0m[0mfinal_args[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m~/micromamba/envs/docs/lib/python3.12/site-packages/molsysmt/basic/convert.py[0m in [0;36m?[0;34m(molecular_system, to_form, selection, structure_indices, syntax, verbose, skip_digestion, **kwargs)[0m
[1;32m    526[0m         [0;32mreturn[0m [0moutput[0m[0;34m[0m[0;34m[0m[0m
[1;32m    527[0m [0;34m[0m[0m
[1;32m    528[0m     [0;31m# If one to one[0m[0;34m[0m[0;34m[0m[0m
[1;32m    529[0m     [0;32mif[0m [0;32mnot[0m [0misinstance[0m[0;34m([0m[0mfrom_form[0m[0;34m,[0m [0;34m([0m[0mlist[0m[0;34m,[0m [0mtuple[0m[0;34m)[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 530[0;31m         output = _convert_one_to_one(molecular_system, from_form, to_form=to_form, selection=selection, structure_indices=structure_indices,
[0m[1;32m    531[0m                 [0msyntax[0m[0;34m=[0m[0msyntax[0m[0;34m,[0m [0mverbose[0m[0;34m=[0m[0mverbose[0m[0;34m,[0m [0mskip_digestion[0m[0;34m=[0m[0;32mTrue[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    532[0m [0;34m[0m[0m
[1;32m    533[0m     [0;31m# If multiple to one[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/micromamba/envs/docs/lib/python3.12/site-packages/molsysmt/basic/convert.py[0m in [0;36m?[0;34m(molecular_system, from_form, to_form, selection, structure_indices, syntax, verbose, **kwargs)[0m
[1;32m     83[0m [0;34m[0m[0m
[1;32m     84[0m             [0;32mif[0m [0mlen[0m[0;34m([0m[0mmissing_arguments[0m[0;34m)[0m[0;34m>[0m[0;36m0[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     85[0m                 [0;32mraise[0m [0mNotCompatibleConversionError[0m[0;34m([0m[0mfrom_form[0m[0;34m,[0m [0mto_form[0m[0;34m,[0m [0mmissing_arguments[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     86[0m [0;34m[0m[0m
[0;32m---> 87[0;31m         [0moutput[0m [0;34m=[0m [0mfunction[0m[0;34m([0m[0mmolecular_system[0m[0;34m,[0m [0;34m**[0m[0mconversion_arguments[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     88[0m [0;34m[0m[0m
[1;32m     89[0m     [0;32melif[0m [0;34m([0m[0;34m'molsysmt.MolSys'[0m [0;32min[0m [0m_dict_modules[0m[0;34m[[0m[0mfrom_form[0m[0;34m][0m[0;34m.[0m[0m_convert_to[0m[0;34m)[0m [0;32mand[0m [0;34m([0m[0mto_form[0m [0;32min[0m [0m_dict_modules[0m[0;34m[[0m[0;34m'molsysmt.MolSys'[0m[0;34m][0m[0;34m.[0m[0m_convert_to[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     90[0m [0;34m[0m[0m

[0;32m~/micromamba/envs/docs/lib/python3.12/site-packages/molsysmt/_private/digestion/digest.py[0m in [0;36m?[0;34m(*args, **kwargs)[0m
[1;32m     48[0m         [0;34m@[0m[0mfunctools[0m[0;34m.[0m[0mwraps[0m[0;34m([0m[0mfunc[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     49[0m         [0;32mdef[0m [0mwrapper[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     50[0m [0;34m[0m[0m
[1;32m     51[0m             [0;32mif[0m [0mkwargs[0m[0;34m.[0m[0mget[0m[0;34m([0m[0;34m'skip_digestion'[0m[0;34m,[0m [0;32mFalse[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 52[0;31m                 [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     53[0m [0;34m[0m[0m
[1;32m     54[0m             [0;31m# Define caller[0m[0;34m[0m[0;34m[0m[0m
[1;32m     55[0m [0;34m[0m[0m

[0;32m~/micromamba/envs/docs/lib/python3.12/site-packages/molsysmt/form/molsysmt_MolSys/to_openmm_Context.py[0m in [0;36m?[0;34m(item, atom_indices, structure_indices, forcefield, water_model, implicit_solvent, non_bonded_method, constraints, switch_distance, dispersion_correction, ewald_error_tolerance, integrator, temperature, friction, time_step, platform, skip_digestion)[0m
[1;32m     14[0m [0;34m[0m[0m
[1;32m     15[0m     [0mtmp_item[0m [0;34m=[0m [0mto_openmm_Topology[0m[0;34m([0m[0mitem[0m[0;34m,[0m [0matom_indices[0m[0;34m=[0m[0matom_indices[0m[0;34m,[0m [0mstructure_indices[0m[0;34m=[0m[0mstructure_indices[0m[0;34m,[0m [0mskip_digestion[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     16[0m     [0mcoordinates[0m [0;34m=[0m [0mget_coordinates_from_atom[0m[0;34m([0m[0mitem[0m[0;34m,[0m [0mindices[0m[0;34m=[0m[0matom_indices[0m[0;34m,[0m [0mstructure_indices[0m[0;34m=[0m[0mstructure_indices[0m[0;34m,[0m [0mskip_digestion[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     17[0m [0;34m[0m[0m
[0;32m---> 18[0;31m     tmp_item = openmm_Topology_to_openmm_Context(tmp_item, coordinates=coordinates,
[0m[1;32m     19[0m             [0mforcefield[0m[0;34m=[0m[0mforcefield[0m[0;34m,[0m [0mwater_model[0m[0;34m=[0m[0mwater_model[0m[0;34m,[0m [0mimplicit_solvent[0m[0;34m=[0m[0mimplicit_solvent[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m     20[0m             [0mnon_bonded_method[0m[0;34m=[0m[0mnon_bonded_method[0m[0;34m,[0m [0mconstraints[0m[0;34m=[0m[0mconstraints[0m[0;34m,[0m [0mswitch_distance[0m[0;34m=[0m[0mswitch_distance[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m     21[0m             [0mdispersion_correction[0m[0;34m=[0m[0mdispersion_correction[0m[0;34m,[0m [0mewald_error_tolerance[0m[0;34m=[0m[0mewald_error_tolerance[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/micromamba/envs/docs/lib/python3.12/site-packages/molsysmt/_private/digestion/digest.py[0m in [0;36m?[0;34m(*args, **kwargs)[0m
[1;32m     48[0m         [0;34m@[0m[0mfunctools[0m[0;34m.[0m[0mwraps[0m[0;34m([0m[0mfunc[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     49[0m         [0;32mdef[0m [0mwrapper[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     50[0m [0;34m[0m[0m
[1;32m     51[0m             [0;32mif[0m [0mkwargs[0m[0;34m.[0m[0mget[0m[0;34m([0m[0;34m'skip_digestion'[0m[0;34m,[0m [0;32mFalse[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 52[0;31m                 [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     53[0m [0;34m[0m[0m
[1;32m     54[0m             [0;31m# Define caller[0m[0;34m[0m[0;34m[0m[0m
[1;32m     55[0m [0;34m[0m[0m

[0;32m~/micromamba/envs/docs/lib/python3.12/site-packages/molsysmt/form/openmm_Topology/to_openmm_Context.py[0m in [0;36m?[0;34m(item, atom_indices, coordinates, forcefield, water_model, implicit_solvent, non_bonded_method, constraints, switch_distance, dispersion_correction, ewald_error_tolerance, integrator, temperature, friction, time_step, platform, skip_digestion)[0m
[1;32m     14[0m             [0mwater_model[0m[0;34m=[0m[0mwater_model[0m[0;34m,[0m [0mimplicit_solvent[0m[0;34m=[0m[0mimplicit_solvent[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m     15[0m             [0mnon_bonded_method[0m[0;34m=[0m[0mnon_bonded_method[0m[0;34m,[0m [0mconstraints[0m[0;34m=[0m[0mconstraints[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m     16[0m             [0mswitch_distance[0m[0;34m=[0m[0mswitch_distance[0m[0;34m,[0m [0mdispersion_correction[0m[0;34m=[0m[0mdispersion_correction[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m     17[0m             [0mewald_error_tolerance[0m[0;34m=[0m[0mewald_error_tolerance[0m[0;34m,[0m [0mskip_digestion[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 18[0;31m     context = openmm_System_to_openmm_Context(system, coordinates=coordinates,
[0m[1;32m     19[0m             [0mintegrator[0m[0;34m=[0m[0mintegrator[0m[0;34m,[0m [0mtemperature[0m[0;34m=[0m[0mtemperature[0m[0;34m,[0m [0mfriction[0m[0;34m=[0m[0mfriction[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m     20[0m             [0mtime_step[0m[0;34m=[0m[0mtime_step[0m[0;34m,[0m [0mplatform[0m[0;34m=[0m[0mplatform[0m[0;34m,[0m [0mskip_digestion[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     21[0m [0;34m[0m[0m

[0;32m~/micromamba/envs/docs/lib/python3.12/site-packages/molsysmt/_private/digestion/digest.py[0m in [0;36m?[0;34m(*args, **kwargs)[0m
[1;32m     48[0m         [0;34m@[0m[0mfunctools[0m[0;34m.[0m[0mwraps[0m[0;34m([0m[0mfunc[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     49[0m         [0;32mdef[0m [0mwrapper[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     50[0m [0;34m[0m[0m
[1;32m     51[0m             [0;32mif[0m [0mkwargs[0m[0;34m.[0m[0mget[0m[0;34m([0m[0;34m'skip_digestion'[0m[0;34m,[0m [0;32mFalse[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 52[0;31m                 [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     53[0m [0;34m[0m[0m
[1;32m     54[0m             [0;31m# Define caller[0m[0;34m[0m[0;34m[0m[0m
[1;32m     55[0m [0;34m[0m[0m

[0;32m~/micromamba/envs/docs/lib/python3.12/site-packages/molsysmt/form/openmm_System/to_openmm_Context.py[0m in [0;36m?[0;34m(item, atom_indices, coordinates, integrator, temperature, friction, time_step, platform, skip_digestion)[0m
[1;32m     16[0m     [0;32mif[0m [0mintegrator[0m[0;34m==[0m[0;34m'Langevin'[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     17[0m         [0mintegrator[0m [0;34m=[0m [0mmm[0m[0;34m.[0m[0mLangevinIntegrator[0m[0;34m([0m[0mtemperature[0m[0;34m,[0m [0mfriction[0m[0;34m,[0m [0mtime_step[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     18[0m [0;34m[0m[0m
[1;32m     19[0m     [0;32mif[0m [0mplatform[0m[0;34m==[0m[0;34m'CUDA'[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 20[0;31m         [0mplatform[0m    [0;34m=[0m [0mmm[0m[0;34m.[0m[0mPlatform[0m[0;34m.[0m[0mgetPlatformByName[0m[0;34m([0m[0;34m'CUDA'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     21[0m     [0;32melif[0m [0mplatform[0m[0;34m==[0m[0;34m'CPU'[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     22[0m         [0mplatform[0m    [0;34m=[0m [0mmm[0m[0;34m.[0m[0mPlatform[0m[0;34m.[0m[0mgetPlatformByName[0m[0;34m([0m[0;34m'CPU'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     23[0m [0;34m[0m[0m

[0;32m~/micromamba/envs/docs/lib/python3.12/site-packages/openmm/openmm.py[0m in [0;36m?[0;34m(name)[0m
[1;32m  12493[0m         [0mGet[0m [0mthe[0m [0mregistered[0m [0mPlatform[0m [0;32mwith[0m [0ma[0m [0mparticular[0m [0mname[0m[0;34m.[0m [0mIf[0m [0mno[0m [0mPlatform[0m [0;32mwith[0m [0mthat[0m [0mname[0m [0mhas[0m [0mbeen[0m [0mregistered[0m[0;34m,[0m [0mthis[0m [0mthrows[0m [0man[0m [0mexception[0m[0;34m.[0m[0;34m[0m[0;34m[0m[0m
[1;32m  12494[0m [0;34m[0m[0m
[1;32m  12495[0m         [0mThis[0m [0;32mis[0m [0midentical[0m [0mto[0m [0mthe[0m [0mversion[0m [0mof[0m [0mgetPlatform[0m[0;34m([0m[0;34m)[0m [0mthat[0m [0mtakes[0m [0ma[0m [0mname[0m[0;34m.[0m [0mIt[0m [0;32mis[0m [0mhere[0m [0;32mfor[0m [0mbackward[0m [0mcompatibility[0m[0;34m.[0m[0;34m[0m[0;34m[0m[0m
[1;32m  12496[0m         """
[0;32m> 12497[0;31m         [0;32mreturn[0m [0m_openmm[0m[0;34m.[0m[0mPlatform_getPlatformByName[0m[0;34m([0m[0mname[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;31mOpenMMException[0m: There is no registered Platform called "CUDA"

